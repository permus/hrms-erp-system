# Fix Multi-Tenant Architecture - Keep Current Theme/Colors

## Current Problem
The system is showing a mixed interface with both admin and employee functions together. We need **completely separate portal systems** based on user roles, but **keep all current styling and colors exactly as they are**.

## Required Architecture Fix (No Theme Changes)

### **1. Three Distinct Portal Systems**

#### **A. Super Admin Portal** (`/super-admin/*`)
**Purpose**: Platform owner (omar@omeda.io) manages the entire HRMS platform
**URL Structure**: `/super-admin/dashboard`, `/super-admin/companies`, `/super-admin/analytics`

**Features Needed**:
- Company Management (create, suspend, delete companies)
- Platform Analytics (all companies usage stats)
- Billing & Subscription Management
- Invite Company Administrators
- System Configuration

**Dashboard Should Show** (using current styling):
- Total companies on platform
- Total users across all companies
- Platform revenue metrics
- Recent company registrations
- System health status

#### **B. Company Admin Portal** (`/company-admin/*`)
**Purpose**: Company administrators manage their specific company
**URL Structure**: `/company-admin/dashboard`, `/company-admin/employees`, `/company-admin/hr`

**Features Needed**:
- Employee Management (move the current employee system here)
- Department & Position Management
- Company Settings
- Invite Team Members (HR, Managers, Employees)
- Company-specific Reports

**Dashboard Should Show** (using current card styling):
- Module cards similar to what's shown but for business modules
- Human Resources, Payroll, Finance, CRM, Projects modules
- Company employee count
- Department breakdown
- Recent activities within the company

#### **C. Employee Self-Service Portal** (`/employee/*`)
**Purpose**: Individual employees access their personal information
**URL Structure**: `/employee/dashboard`, `/employee/profile`, `/employee/documents`

**Features Needed**:
- Personal profile management
- Leave requests and balance viewing
- Document uploads
- Payslip downloads
- Attendance records

**Dashboard Should Show** (keep current "My Dashboard" design):
- Leave Balance (keep current design)
- Documents Status (keep current design)
- This Month's worked days (keep current design)
- Quick Actions (Request Leave, Update Profile, View Payslip)

### **2. Authentication & Routing Logic**

```javascript
// middleware.js - Route protection and redirection
import { NextResponse } from 'next/server'
import { getUser } from '@replit/auth'

export async function middleware(request) {
  const user = await getUser(request)
  const { pathname } = request.nextUrl
  
  // Redirect based on user role after login
  if (pathname === '/' || pathname === '/dashboard') {
    if (!user) {
      return NextResponse.redirect(new URL('/auth/signin', request.url))
    }
    
    // Get user role from database
    const dbUser = await getUserRole(user.email)
    
    // Redirect to appropriate portal
    switch (dbUser.role) {
      case 'SUPER_ADMIN':
        return NextResponse.redirect(new URL('/super-admin/dashboard', request.url))
      case 'COMPANY_ADMIN':
      case 'HR_MANAGER':
        return NextResponse.redirect(new URL('/company-admin/dashboard', request.url))
      case 'EMPLOYEE':
        return NextResponse.redirect(new URL('/employee/dashboard', request.url))
      default:
        return NextResponse.redirect(new URL('/auth/signin', request.url))
    }
  }
  
  // Protect super admin routes
  if (pathname.startsWith('/super-admin')) {
    if (!user || dbUser.role !== 'SUPER_ADMIN') {
      return NextResponse.redirect(new URL('/auth/signin', request.url))
    }
  }
  
  // Protect company admin routes
  if (pathname.startsWith('/company-admin')) {
    if (!user || !['COMPANY_ADMIN', 'HR_MANAGER'].includes(dbUser.role)) {
      return NextResponse.redirect(new URL('/auth/signin', request.url))
    }
  }
  
  // Protect employee routes
  if (pathname.startsWith('/employee')) {
    if (!user || dbUser.role !== 'EMPLOYEE') {
      return NextResponse.redirect(new URL('/auth/signin', request.url))
    }
  }
  
  return NextResponse.next()
}
```

### **3. Database Schema with Multi-Tenancy**

```sql
-- Add these tables if they don't exist (keep current table styling)

-- Companies (root level)
CREATE TABLE IF NOT EXISTS companies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  subdomain VARCHAR(100) UNIQUE,
  settings JSONB DEFAULT '{}',
  created_at TIMESTAMP DEFAULT NOW(),
  is_active BOOLEAN DEFAULT true
);

-- Update users table with proper roles (keep current user table structure)
ALTER TABLE users ADD COLUMN IF NOT EXISTS company_id UUID REFERENCES companies(id);
ALTER TABLE users ADD COLUMN IF NOT EXISTS role VARCHAR(50) DEFAULT 'EMPLOYEE';
ALTER TABLE users ADD COLUMN IF NOT EXISTS password VARCHAR(255);

-- Insert super admin if not exists
INSERT INTO users (email, name, role, is_active) 
VALUES ('omar@omeda.io', 'Omar', 'SUPER_ADMIN', true)
ON CONFLICT (email) DO UPDATE SET role = 'SUPER_ADMIN';
```

### **4. Page Structure to Create (No Styling Changes)**

```
app/
├── super-admin/
│   ├── dashboard/
│   │   └── page.tsx          # Platform overview (use current card styles)
│   ├── companies/
│   │   ├── page.tsx          # Company list
│   │   └── invite/page.tsx   # Invite company admin
│   └── layout.tsx            # Super admin layout (copy current layout)
├── company-admin/
│   ├── dashboard/
│   │   └── page.tsx          # Module cards (use current card styling)
│   ├── employees/
│   │   └── page.tsx          # Move current employee system here exactly
│   ├── hr/
│   │   └── page.tsx          # HR management
│   └── layout.tsx            # Company admin layout (copy current layout)
├── employee/
│   ├── dashboard/
│   │   └── page.tsx          # Current "My Dashboard" view exactly as is
│   ├── profile/
│   │   └── page.tsx          # Personal profile
│   └── layout.tsx            # Employee layout (copy current layout)
└── auth/
    └── signin/
        └── page.tsx          # Keep current login page styling
```

### **5. Super Admin Dashboard Component (Use Current Styling)**

```tsx
// app/super-admin/dashboard/page.tsx - Copy current dashboard styling
export default function SuperAdminDashboard() {
  return (
    <div className="p-6"> {/* Use same padding as current dashboard */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Platform Overview</h1>
        <p className="text-gray-600">Manage companies and platform operations</p>
      </div>
      
      {/* Platform Stats - Use same card styling as current dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white p-6 rounded-lg shadow"> {/* Same card style */}
          <h3 className="text-lg font-semibold text-gray-900">Total Companies</h3>
          <p className="text-3xl font-bold text-blue-600">{stats.totalCompanies}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-semibold text-gray-900">Total Users</h3>
          <p className="text-3xl font-bold text-green-600">{stats.totalUsers}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-semibold text-gray-900">Active Companies</h3>
          <p className="text-3xl font-bold text-purple-600">{stats.activeCompanies}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-semibold text-gray-900">Monthly Revenue</h3>
          <p className="text-3xl font-bold text-orange-600">${stats.revenue}</p>
        </div>
      </div>
      
      {/* Quick Actions - Use same styling as current quick actions */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-semibold mb-4">Quick Actions</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Link href="/super-admin/companies/invite" 
                className="p-4 border rounded-lg hover:bg-gray-50">
            <h3 className="font-semibold mb-2">Add New Company</h3>
            <p className="text-gray-600">Invite a company administrator</p>
          </Link>
          <Link href="/super-admin/companies" 
                className="p-4 border rounded-lg hover:bg-gray-50">
            <h3 className="font-semibold mb-2">Manage Companies</h3>
            <p className="text-gray-600">View and manage all companies</p>
          </Link>
          <Link href="/super-admin/analytics" 
                className="p-4 border rounded-lg hover:bg-gray-50">
            <h3 className="font-semibold mb-2">View Analytics</h3>
            <p className="text-gray-600">Platform usage and metrics</p>
          </Link>
        </div>
      </div>
    </div>
  )
}
```

### **6. Company Admin Dashboard (Use Current Card Styling)**

```tsx
// app/company-admin/dashboard/page.tsx - Copy current styling exactly
export default function CompanyAdminDashboard() {
  return (
    <div className="p-6"> {/* Same as current */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Company Dashboard</h1>
        <p className="text-gray-600">Overview of your company operations</p>
      </div>
      
      {/* Module Grid - Use same card styling as current dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        
        {/* Human Resources - Copy exact card styling from current dashboard */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center mb-4">
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <Users className="w-6 h-6 text-blue-600" />
            </div>
            <div className="ml-4">
              <h3 className="text-lg font-semibold text-gray-900">Human Resources</h3>
              <p className="text-sm text-gray-600">Employee management, leave tracking, and HR analytics</p>
            </div>
          </div>
          <Link href="/company-admin/employees" 
                className="inline-flex items-center text-blue-600 hover:text-blue-700">
            Open Dashboard
            <ChevronRight className="w-4 h-4 ml-1" />
          </Link>
        </div>
        
        {/* Payroll - Same styling */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center mb-4">
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <DollarSign className="w-6 h-6 text-green-600" />
            </div>
            <div className="ml-4">
              <h3 className="text-lg font-semibold text-gray-900">Payroll</h3>
              <p className="text-sm text-gray-600">Salary processing, payslips, and compensation management</p>
            </div>
          </div>
          <button className="inline-flex items-center text-green-600 hover:text-green-700">
            Open Dashboard
            <ChevronRight className="w-4 h-4 ml-1" />
          </button>
        </div>
        
        {/* Finance - Same styling */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center mb-4">
            <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
              <CreditCard className="w-6 h-6 text-purple-600" />
            </div>
            <div className="ml-4">
              <h3 className="text-lg font-semibold text-gray-900">Finance</h3>
              <p className="text-sm text-gray-600">Expense tracking, budgets, and financial analytics</p>
            </div>
          </div>
          <button className="inline-flex items-center text-purple-600 hover:text-purple-700">
            Open Dashboard
            <ChevronRight className="w-4 h-4 ml-1" />
          </button>
        </div>
      </div>
    </div>
  )
}
```

### **7. Employee Dashboard (Keep Current Design Exactly)**

```tsx
// app/employee/dashboard/page.tsx - Move current "My Dashboard" here exactly
// Copy the current dashboard with Leave Balance, Documents Status, This Month, Quick Actions
// Keep all current styling, colors, and layout exactly as it is now
```

## Implementation Instructions

1. **Keep all current CSS classes, colors, and styling exactly as they are**
2. **Create the three portal structures** with separate layouts and routing
3. **Move current employee system** to `/company-admin/employees` (no styling changes)
4. **Move current "My Dashboard"** to `/employee/dashboard` (no styling changes)
5. **Add middleware for role-based redirects**
6. **Create super admin portal** using same card styling as current dashboard
7. **Create company admin module dashboard** using same card styling
8. **Test role separation** with different user types

**IMPORTANT**: Do not change any colors, fonts, spacing, or visual design. Only restructure the pages and add routing logic.