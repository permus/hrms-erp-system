Fix the document upload functionality in the employee module. The current error shows "Failed to save metadata" which indicates issues with file handling and database operations.

BACKEND FIXES NEEDED:

1. UPDATE FILE UPLOAD ROUTE (server/routes/documents.js or similar):
```javascript
import multer from 'multer';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import fs from 'fs/promises';

// Configure multer for file upload
const storage = multer.diskStorage({
  destination: async (req, file, cb) => {
    const uploadDir = 'uploads/documents';
    try {
      await fs.mkdir(uploadDir, { recursive: true });
      cb(null, uploadDir);
    } catch (error) {
      cb(error);
    }
  },
  filename: (req, file, cb) => {
    const uniqueId = uuidv4();
    const extension = path.extname(file.originalname);
    const filename = `${uniqueId}${extension}`;
    cb(null, filename);
  }
});

const upload = multer({
  storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['.pdf', '.jpg', '.jpeg', '.png', '.doc', '.docx'];
    const extension = path.extname(file.originalname).toLowerCase();
    
    if (allowedTypes.includes(extension)) {
      cb(null, true);
    } else {
      cb(new Error('Invalid file type. Only PDF, images, and documents allowed.'));
    }
  }
});

// Upload endpoint
router.post('/upload', upload.single('document'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    const { employeeId, documentType, expiryDate } = req.body;
    
    // Save document metadata to database
    const document = await prisma.document.create({
      data: {
        employeeId,
        documentType,
        fileName: req.file.filename,
        originalName: req.file.originalname,
        fileUrl: `/uploads/documents/${req.file.filename}`,
        fileSize: req.file.size,
        mimeType: req.file.mimetype,
        expiryDate: expiryDate ? new Date(expiryDate) : null,
        companyId: req.user.companyId, // From auth middleware
      }
    });

    res.status(201).json({
      success: true,
      document,
      message: 'Document uploaded successfully'
    });

  } catch (error) {
    console.error('Upload error:', error);
    
    // Clean up uploaded file if database save failed
    if (req.file) {
      try {
        await fs.unlink(req.file.path);
      } catch (unlinkError) {
        console.error('Failed to clean up file:', unlinkError);
      }
    }
    
    res.status(500).json({ 
      error: 'Failed to upload document',
      details: error.message 
    });
  }
});

UPDATE DATABASE SCHEMA (if needed):

prismamodel Document {
  id           String       @id @default(cuid())
  companyId    String
  employeeId   String?
  documentType DocumentType
  fileName     String       // Stored filename
  originalName String       // Original filename
  fileUrl      String       // Path to file
  fileSize     Int          // File size in bytes
  mimeType     String       // MIME type
  uploadDate   DateTime     @default(now())
  expiryDate   DateTime?
  status       DocumentStatus @default(ACTIVE)
  
  company  Company   @relation(fields: [companyId], references: [id])
  employee Employee? @relation(fields: [employeeId], references: [id])
  
  @@map("documents")
}

enum DocumentType {
  PASSPORT
  EMIRATES_ID_FRONT
  EMIRATES_ID_BACK
  VISA
  EMPLOYMENT_CONTRACT
  DEGREE
  OTHER
}

enum DocumentStatus {
  ACTIVE
  EXPIRED
  REPLACED
  DELETED
}

FRONTEND UPLOAD COMPONENT FIX:

tsxconst DocumentUpload = ({ documentType, employeeId, onUploadSuccess }) => {
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState('');

  const handleFileUpload = async (file) => {
    if (!file) return;

    setUploading(true);
    setError('');

    const formData = new FormData();
    formData.append('document', file);
    formData.append('employeeId', employeeId);
    formData.append('documentType', documentType);

    try {
      const response = await fetch('/api/documents/upload', {
        method: 'POST',
        body: formData,
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Upload failed');
      }

      onUploadSuccess(result.document);
      
    } catch (error) {
      console.error('Upload error:', error);
      setError(error.message);
    } finally {
      setUploading(false);
    }
  };

  return (
    <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-primary transition-colors">
      <input
        type="file"
        id={`upload-${documentType}`}
        className="hidden"
        accept=".pdf,.jpg,.jpeg,.png,.doc,.docx"
        onChange={(e) => handleFileUpload(e.target.files[0])}
        disabled={uploading}
      />
      
      <label
        htmlFor={`upload-${documentType}`}
        className="cursor-pointer flex flex-col items-center space-y-2"
      >
        <div className="text-4xl text-gray-400">ðŸ“„</div>
        <div className="text-center">
          <p className="text-sm font-medium text-gray-700">
            {uploading ? 'Uploading...' : 'Click to upload or drag and drop'}
          </p>
          <p className="text-xs text-gray-500">
            PDF, JPG, PNG, DOC up to 10MB
          </p>
        </div>
      </label>
      
      {error && (
        <div className="mt-2 text-sm text-red-600 bg-red-50 p-2 rounded">
          {error}
        </div>
      )}
      
      {uploading && (
        <div className="mt-2 w-full bg-gray-200 rounded-full h-2">
          <div className="bg-primary h-2 rounded-full animate-pulse w-full"></div>
        </div>
      )}
    </div>
  );
};

ENSURE UPLOADS DIRECTORY EXISTS:
Add this to your server startup:

javascriptimport fs from 'fs/promises';

// Create uploads directory on startup
async function ensureUploadsDir() {
  try {
    await fs.mkdir('uploads/documents', { recursive: true });
    console.log('Uploads directory ready');
  } catch (error) {
    console.error('Failed to create uploads directory:', error);
  }
}

ensureUploadsDir();

SERVE STATIC FILES:
In your main server file:

javascriptimport express from 'express';
import path from 'path';

app.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));
This should resolve the document upload issues you're experiencing.

Apply these fixes to resolve the document upload functionality in your employee module.RetryOstill having issues with adding new employees - i have been trying to fix this for over 2 daysEditI can see the validation errors in your console - the issue is with field validation, specifically string length and format validation. Let me provide a targeted fix for this:
Fix the employee creation validation errors. The console shows multiple validation issues:

PROBLEM: Form validation is rejecting valid data due to overly strict validation rules.

SOLUTION: Update your validation schema and backend validation:

1. UPDATE ZOD VALIDATION SCHEMA (frontend):
```typescript
import { z } from 'zod';

const employeeSchema = z.object({
  // Personal Information - Make most fields optional except critical ones
  personalInfo: z.object({
    firstName: z.string().min(1, "First name is required").max(50),
    lastName: z.string().min(1, "Last name is required").max(50),
    fatherName: z.string().optional(),
    motherName: z.string().optional(),
    dateOfBirth: z.string().optional(),
    nationality: z.string().optional(),
    religion: z.string().optional(),
    maritalStatus: z.string().optional(),
  }),

  // Contact Information - Relax validation
  contactInfo: z.object({
    personalEmail: z.string().email("Invalid email").optional(),
    companyEmail: z.string().email("Invalid email").optional(),
    uaePhone: z.string().min(1, "Phone number is required"),
    homePhone: z.string().optional(),
    uaeAddress: z.string().optional(),
    homeCountryAddress: z.string().optional(),
  }),

  // Employment Details
  employmentDetails: z.object({
    position: z.string().min(1, "Position is required"),
    department: z.string().optional(),
    startDate: z.string().min(1, "Start date is required"),
    employmentStatus: z.string().default("probation"),
    probationMonths: z.number().default(6),
    contractType: z.string().default("permanent"),
  }),

  // Compensation - Make all optional except basic salary
  compensation: z.object({
    basicSalary: z.number().min(1, "Basic salary is required"),
    housingAllowance: z.number().default(0),
    transportAllowance: z.number().default(0),
    otherAllowances: z.number().default(0),
    annualFlightAllowance: z.string().default("not_eligible"),
    medicalInsurance: z.string().default("basic"),
    bankName: z.string().optional(),
    accountNumber: z.string().optional(),
    iban: z.string().optional(),
  }),

  // Documents - Make all optional
  documents: z.object({
    passportNumber: z.string().optional(),
    passportExpiry: z.string().optional(),
    emiratesId: z.string().optional(),
    emiratesIdExpiry: z.string().optional(),
    visaType: z.string().optional(),
    visaNumber: z.string().optional(),
    visaExpiry: z.string().optional(),
  }).optional(),
});

UPDATE BACKEND VALIDATION (server-side):

javascript// Remove overly strict validation
const createEmployeeSchema = z.object({
  personalInfo: z.object({
    firstName: z.string().min(1).max(100),
    lastName: z.string().min(1).max(100),
    fatherName: z.string().optional(),
    motherName: z.string().optional(),
    // Remove strict regex patterns that are failing
  }),
  
  contactInfo: z.object({
    uaePhone: z.string().min(1), // Just require non-empty
    personalEmail: z.string().email().optional(),
    // Relax other validations
  }),
  
  // Make everything else optional or with relaxed validation
});

// In your route handler:
router.post('/employees', async (req, res) => {
  try {
    // Remove strict validation temporarily
    const employeeData = req.body;
    
    // Create employee with basic validation only
    const newEmployee = await prisma.employee.create({
      data: {
        companyId: req.user.companyId,
        employeeId: `EMP-${Date.now()}`, // Simple ID generation
        
        // Personal Info
        firstName: employeeData.personalInfo?.firstName,
        lastName: employeeData.personalInfo?.lastName,
        fatherName: employeeData.personalInfo?.fatherName || null,
        motherName: employeeData.personalInfo?.motherName || null,
        
        // Contact Info  
        uaePhone: employeeData.contactInfo?.uaePhone,
        personalEmail: employeeData.contactInfo?.personalEmail || null,
        
        // Employment
        position: employeeData.employmentDetails?.position,
        startDate: new Date(employeeData.employmentDetails?.startDate),
        
        // Compensation
        basicSalary: employeeData.compensation?.basicSalary || 0,
        housingAllowance: employeeData.compensation?.housingAllowance || 0,
        transportAllowance: employeeData.compensation?.transportAllowance || 0,
        otherAllowances: employeeData.compensation?.otherAllowances || 0,
        
        // Calculate total
        totalSalary: (employeeData.compensation?.basicSalary || 0) + 
                    (employeeData.compensation?.housingAllowance || 0) + 
                    (employeeData.compensation?.transportAllowance || 0) + 
                    (employeeData.compensation?.otherAllowances || 0),
      }
    });

    res.status(201).json({
      success: true,
      employee: newEmployee,
      message: 'Employee created successfully'
    });

  } catch (error) {
    console.error('Employee creation error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to create employee',
      details: error.message
    });
  }
});

SIMPLIFY FORM SUBMISSION:

typescriptconst handleSubmit = async (formData) => {
  try {
    const response = await fetch('/api/employees', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(formData),
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.details || result.error || 'Failed to create employee');
    }

    // Success - redirect or show success message
    router.push('/hr/employees');
    
  } catch (error) {
    console.error('Submission error:', error);
    setError(error.message);
  }
};

TEMPORARY DEBUGGING - LOG THE EXACT DATA:
Add this to see what's being sent:

javascriptconsole.log('Form data being submitted:', JSON.stringify(formData, null, 2));
This should resolve the validation errors. Start with minimal required fields and add more validation gradually once the basic creation works.

This removes the overly strict validation that's causing the errors and gets your employee creation working with just the essential fields.