# Complete ERP/HRMS System Implementation Prompt for Cursor

## Project Overview
Create a comprehensive multi-tenant ERP/HRMS system with three main portal types, complete UAE employment compliance, document management, and workflow automation.

## System Architecture Requirements

### Multi-Tenant Architecture with Three Portal Types:

#### 1. **SUPER ADMIN PORTAL** (Product Owner Portal)
- **URL**: `/super-admin/*`
- **Purpose**: Manage the entire HRMS platform
- **Features**:
  - Company Management (create, suspend, delete companies)
  - Subscription & Billing Management
  - Platform Analytics & Usage Stats
  - System Configuration & Feature Flags
  - Support Ticket Management
  - Platform-wide Reports
  - Multi-tenant data isolation controls

#### 2. **COMPANY ADMIN PORTAL**
- **URL**: `/company-admin/*`
- **Purpose**: Company-specific administration
- **Features**:
  - Employee Management (CRUD operations)
  - Department & Position Management
  - Attendance & Leave Management
  - Payroll Processing
  - Document Management & Compliance
  - Company-specific Reports
  - Employee Onboarding Workflows

#### 3. **EMPLOYEE SELF-SERVICE PORTAL**
- **URL**: `/employee/*`
- **Purpose**: Employee self-service interface
- **Features**:
  - Personal Profile Management
  - Leave Requests & Balance Viewing
  - Attendance Records
  - Payslip Downloads
  - Document Uploads
  - Performance Reviews

## Database Schema Requirements

### Multi-Tenant Tables
```sql
-- Core tenant management
companies (id, name, subdomain, settings, created_at, is_active)
users (id, company_id, email, role, permissions, created_at)
company_modules (company_id, module_name, is_enabled, settings)

-- Employee management with UAE compliance
employees (
  id, company_id, employee_code, 
  personal_info (JSON): name, father_name, mother_name, dob, nationality, religion, marital_status,
  contact_info (JSON): uae_phone, home_country_phone, email, uae_address, home_country_address,
  employment_details (JSON): position, department, reporting_manager_id, start_date, employment_status, probation_months,
  probation_info (JSON): start_date, end_date, status, evaluation_scores, confirmation_date, extension_details,
  compensation (JSON): basic_salary, housing_allowance, transport_allowance, other_allowance, total_salary,
  visa_info (JSON): current_status, visa_type, expiry_date, passport_place_of_issue,
  emirates_id_info (JSON): status, id_number, expiry_date,
  created_at, updated_at, deleted_at
)

-- Document management
employee_documents (
  id, employee_id, document_type, category, file_path, file_name, file_size,
  upload_date, expiry_date, status, version, uploaded_by,
  approval_status, approved_by, approved_date, comments
)

-- Probation notifications and tracking
probation_notifications (
  id, employee_id, notification_type, scheduled_date, sent_date, status,
  recipients (JSON), message_template, custom_message, created_at, updated_at
)

-- Departments and positions
departments (id, company_id, name, parent_id, manager_id, description)
positions (id, company_id, title, department_id, level, job_description)

-- Leave management
leave_types (id, company_id, name, days_allowed, rules, is_active)
leave_requests (id, employee_id, leave_type_id, start_date, end_date, days_requested, reason, status, approvals)
leave_balances (employee_id, leave_type_id, balance, used, carried_over, year)

-- Attendance tracking
attendance_records (id, employee_id, date, check_in, check_out, break_time, total_hours, status, location)
shifts (id, company_id, name, start_time, end_time, break_duration, working_days)
employee_shifts (employee_id, shift_id, effective_from, effective_to)

-- Payroll management
salary_structures (id, employee_id, basic_salary, allowances (JSON), deductions (JSON), effective_from)
payroll_runs (id, company_id, period_start, period_end, status, processed_date, processed_by)
payslips (id, employee_id, payroll_run_id, gross_salary, deductions, net_salary, payslip_data (JSON))
```

## Core Features Implementation

### 1. Employee Management Module (UAE Compliance Focus)

#### Personal Information Management:
- Comprehensive personal data collection (name, father's name, mother's name)
- UAE-specific fields (nationality, religion, Emirates ID, visa status)
- Dual contact system (UAE + home country)
- Address management (current UAE + permanent home country)
- Emergency contact information

#### Employment Details:
- Auto-generated employee ID system
- Position hierarchy and reporting structure
- Probation period management with automated notifications
- Employment status workflow (probation → confirmed → permanent)
- Contract management (fixed-term/permanent/temporary)

#### Compensation & Benefits:
- Multi-component salary structure (basic + housing + transport + other allowances)
- Currency support (AED focus)
- End-of-service gratuity calculations per UAE labor law
- Medical insurance tracking
- Annual flight allowance management

#### Document Management System:
**Document Categories:**
- **Identity Documents**: Passport, Emirates ID, Visa pages, Entry stamps
- **Employment Documents**: Contract, offer letter, reference letters, background verification
- **Educational Credentials**: Degrees, certifications, transcripts, attestations
- **Professional Documents**: CV, employment certificates, salary certificates
- **Personal Files**: Photos, medical certificates, insurance documents

**Document Features:**
- Drag-and-drop upload interface
- Document versioning and approval workflows
- Expiry date tracking with automated alerts
- OCR for data extraction
- Secure encrypted storage
- Role-based access control

### 2. Probation Period Management & Notifications

#### Automated Notification System:
- **Start Reminder**: Welcome notifications and orientation schedule
- **Mid-Review**: 45-day performance check-in alerts
- **Final Review**: 75-day pre-completion evaluations
- **Completion Due**: Probation end date reminders
- **Overdue Alerts**: Escalation for pending confirmations

#### Notification Recipients:
- HR team notifications
- Direct manager alerts
- Employee self-service reminders
- Senior management escalations

#### Evaluation Workflow:
- Performance tracking forms
- Manager evaluation submissions
- HR approval processes
- Automatic status updates
- Extension handling for additional probation periods

### 3. Compliance & Legal Framework

#### UAE Labor Law Compliance:
- Visa status monitoring with renewal alerts (90, 60, 30 days)
- Emirates ID expiry tracking
- Medical insurance renewal reminders
- Labor card status monitoring
- End-of-service calculation compliance

#### Multi-Jurisdiction Support:
- Country-specific employment rules engine
- Configurable compliance requirements
- Localized document requirements
- Currency and taxation frameworks

### 4. Role-Based Access Control (RBAC) & Row Level Security (RLS)

#### Permission Levels:
- **Super Admin**: Full platform access across all companies
- **Company Admin**: Full access within assigned company
- **HR Manager**: Employee data + HR operations within company
- **Department Manager**: Team member data + basic operations
- **Employee**: Self-service access only

#### Data Security:
- Row-level security ensuring tenant isolation
- Encrypted storage for sensitive documents
- Audit trails for all data changes
- GDPR compliance for data protection
- API rate limiting and security headers

## Technology Stack & Deployment Architecture (Replit Native)

### **Primary Development Platform: Replit (All-in-One Solution)**
- **AI-Powered Development**: Utilize Replit Agent for rapid prototyping and code generation
- **Real-time Collaboration**: Multi-developer support with instant sharing
- **Cloud-based IDE**: No local setup required, browser-based development
- **Integrated Services**: Built-in database, auth, storage, and deployment

### **Backend & Database Stack (Replit Native):**

#### **Database: Replit SQL Database (PostgreSQL)**
- **Fully-Managed Serverless**: Built-in PostgreSQL with auto-scaling
- **Instant Setup**: One-click database creation via Replit Agent
- **Development/Production Split**: Separate dev and prod databases
- **Built-in Tools**: SQL runner, Drizzle Studio for visual data management
- **Environment Variables**: Automatic connection string management

**Replit Database Configuration:**
```javascript
// Replit automatically provides these environment variables:
// DATABASE_URL - Full connection string
// PGPASSWORD - Database password

// lib/db.js - Database connection
import { Client } from 'pg'

const client = new Client({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
})

await client.connect()
export { client }
```

**Multi-Tenant Schema with RLS:**
```sql
-- Replit Database SQL Runner commands

-- Enable Row Level Security
ALTER DATABASE your_db SET row_security = ON;

-- Companies table (root tenant)
CREATE TABLE companies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  subdomain VARCHAR(100) UNIQUE,
  settings JSONB DEFAULT '{}',
  created_at TIMESTAMP DEFAULT NOW(),
  is_active BOOLEAN DEFAULT true
);

-- Users with enhanced invitation system
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES companies(id),
  email VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255),
  password VARCHAR(255), -- Hashed password
  role VARCHAR(50) DEFAULT 'EMPLOYEE',
  is_active BOOLEAN DEFAULT true,
  must_change_password BOOLEAN DEFAULT false,
  invited_by UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW()
);

-- RLS Policies
CREATE POLICY company_isolation ON companies
  FOR ALL TO authenticated
  USING (id = current_setting('app.current_company_id')::UUID);

CREATE POLICY user_company_isolation ON users
  FOR ALL TO authenticated
  USING (
    company_id = current_setting('app.current_company_id')::UUID 
    OR role = 'SUPER_ADMIN'
  );
```

#### **Authentication: Replit Auth (Built-in)**
- **Zero Configuration**: Automatic user management and sessions
- **Multiple Providers**: Email, Google, GitHub login options
- **Built-in Users Table**: Automatic user storage in database
- **Session Management**: Secure PostgreSQL-backed sessions
- **User Management UI**: Built-in admin interface for user management

**Replit Auth Setup:**
```javascript
// Just tell Replit Agent: "use Replit Auth"
// It automatically configures everything!

// pages/api/auth/[...auth].js
import { createAuthHandler } from '@replit/auth'

export default createAuthHandler({
  // Replit handles all OAuth providers automatically
  providers: ['email', 'google', 'github'],
  database: process.env.DATABASE_URL
})

// lib/auth.js - Check authentication
import { getUser } from '@replit/auth'

export async function getCurrentUser(req) {
  const user = await getUser(req)
  if (!user) return null
  
  // Add company context for multi-tenancy
  const dbUser = await client.query(
    'SELECT * FROM users WHERE email = $1',
    [user.email]
  )
  
  return dbUser.rows[0]
}
```

#### **File Storage: Replit App Storage**
- **Built-in File Storage**: Upload images, videos, PDFs up to 50MB
- **Secure File Handling**: Automatic validation and virus scanning
- **CDN Integration**: Fast global file delivery
- **Usage-Based Billing**: Pay only for what you store

**File Upload Implementation:**
```javascript
// lib/storage.js - Replit App Storage
import { uploadFile, getFileUrl } from '@replit/storage'

export async function uploadDocument(file, employeeId, documentType) {
  // Replit handles file validation, storage, and CDN
  const fileKey = `employees/${employeeId}/documents/${documentType}/${file.name}`
  
  const uploadResult = await uploadFile(file, {
    key: fileKey,
    maxSize: '50MB',
    allowedTypes: ['pdf', 'jpg', 'png', 'docx']
  })
  
  // Get CDN URL for file access
  const fileUrl = await getFileUrl(fileKey)
  
  // Save to database
  await client.query(`
    INSERT INTO employee_documents 
    (employee_id, document_type, file_name, file_url, file_key)
    VALUES ($1, $2, $3, $4, $5)
  `, [employeeId, documentType, file.name, fileUrl, fileKey])
  
  return { fileUrl, fileKey }
}
```

### **Email Service: Resend (External)**
- **Transactional Emails**: User verification, notifications, alerts
- **High Deliverability**: Optimized for UAE/MENA region
- **Template System**: Branded emails for different modules

**Resend Integration:**
```javascript
// lib/email.js
import { Resend } from 'resend'

const resend = new Resend(process.env.RESEND_API_KEY)

export async function sendInvitationEmail(email, tempPassword, companyName) {
  await resend.emails.send({
    from: 'admin@yourdomain.com',
    to: email,
    subject: `Welcome to ${companyName} HRMS`,
    html: `
      <h2>You've been invited to ${companyName}</h2>
      <p>Your temporary login credentials:</p>
      <ul>
        <li>Email: ${email}</li>
        <li>Password: ${tempPassword}</li>
      </ul>
      <a href="${process.env.REPLIT_URL}/auth/signin">Login Now</a>
    `
  })
}
```

### **Deployment: Replit Hosting (Built-in)**
- **Instant Deployment**: Deploy with one click from Replit
- **Custom Domains**: Built-in domain purchasing and management
- **Auto-scaling**: Serverless deployment that scales automatically
- **Environment Management**: Secure secrets and config handling

### **Development Workflow with Replit Agent:**

#### **1. Project Initialization:**
```bash
# Tell Replit Agent:
"Create a Next.js ERP/HRMS system with:
- Replit Auth for authentication  
- Replit Database for PostgreSQL storage
- Multi-tenant architecture with companies and users
- Module-based dashboard like the screenshot
- UAE employment compliance features"
```

#### **2. Automatic Setup by Replit Agent:**
- ✅ **Next.js 14** project with App Router
- ✅ **Replit Database** with PostgreSQL connection
- ✅ **Replit Auth** with user management
- ✅ **App Storage** for file uploads
- ✅ **Environment variables** auto-configured
- ✅ **Development/Production** databases separated

#### **3. Super Admin Seed Script:**
```javascript
// scripts/seed-superadmin.js
import bcrypt from 'bcryptjs'
import { client } from '../lib/db.js'

async function createSuperAdmin() {
  const hashedPassword = await bcrypt.hash('admin123!', 12)
  
  await client.query(`
    INSERT INTO users (email, name, password, role, is_active, email_verified)
    VALUES ($1, $2, $3, $4, $5, $6)
    ON CONFLICT (email) DO NOTHING
  `, [
    'omar@omeda.io',
    'Omar',
    hashedPassword,
    'SUPER_ADMIN',
    true,
    new Date()
  ])
  
  console.log('✅ Super Admin created: omar@omeda.io / admin123!')
}

createSuperAdmin()
```

### **Replit-Specific Advantages:**

#### **1. Zero DevOps:**
- No server management or database provisioning
- Automatic SSL certificates and HTTPS
- Built-in monitoring and error tracking
- Auto-scaling without configuration

#### **2. Instant Collaboration:**
- Real-time code editing with team members
- Built-in version control with Git
- Share running apps instantly with URLs
- Comment and review system built-in

#### **3. AI-Powered Development:**
- Replit Agent builds features from natural language
- Auto-testing and bug fixing
- Code explanation and optimization
- Database schema generation

#### **4. Production Ready:**
- SOC 2 Type II compliance for enterprise security
- GDPR compliant data handling
- Automatic backups and point-in-time restore
- High availability and uptime guarantees

### **Cost Optimization:**
- **Starter Plan**: Free for development and testing
- **Core Plan**: $20/month with $25 credits for production apps
- **Teams Plan**: $40/user for enterprise collaboration
- **Usage-based**: Only pay for database compute time and storage used

### **Migration Path to External Services:**
If later you want to migrate to external services:
- **Database**: Export PostgreSQL to Neon with standard pg_dump
- **Auth**: Migrate user data to NextAuth or other providers
- **Storage**: Move files to AWS S3 or similar services
- **Deployment**: Deploy to Netlify, Vercel, or cloud providers

This Replit-native approach gets you:
- ✅ **Fastest time to market** - No external service setup
- ✅ **Lowest initial cost** - Most services included in Replit subscription
- ✅ **UAE compliance** - No Supabase dependencies
- ✅ **Enterprise security** - SOC 2 compliant infrastructure
- ✅ **Easy team collaboration** - Built-in sharing and review tools
- ✅ **AI-powered development** - Replit Agent handles complex implementations

#### **User Roles & Permissions System:**

**Role Hierarchy:**
1. **SUPER_ADMIN** (omar@omeda.io)
   - Full platform access across all companies
   - Create/manage companies
   - Invite company administrators
   - Platform analytics and billing
   - System configuration

2. **COMPANY_ADMIN** 
   - Full access within assigned company
   - Invite team members (HR, Managers, Employees)
   - Configure company settings
   - Access all company modules
   - Company-wide reporting

3. **HR_MANAGER**
   - Employee management within company
   - Leave and attendance management
   - Payroll operations
   - Document management
   - HR reporting

4. **DEPARTMENT_MANAGER**
   - Team member data access
   - Approval workflows (leave, expenses)
   - Department reporting
   - Performance management

5. **EMPLOYEE**
   - Self-service portal only
   - Personal profile management
   - Leave requests
   - Document uploads
   - Timesheet entry

#### **Invitation Flow Implementation:**

**Super Admin Dashboard (omar@omeda.io):**
```javascript
// pages/super-admin/companies/invite.js
export default function InviteCompanyAdmin() {
  const [formData, setFormData] = useState({
    companyName: '',
    subdomain: '',
    adminName: '',
    adminEmail: '',
    industry: '',
    employeeCount: ''
  })

  const handleInvite = async (e) => {
    e.preventDefault()
    
    const response = await fetch('/api/super-admin/invite-company', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    })
    
    if (response.ok) {
      toast.success('Company admin invited successfully!')
      // Show temp password in secure modal
    }
  }

  return (
    <form onSubmit={handleInvite} className="space-y-6">
      <div className="grid grid-cols-2 gap-6">
        <div>
          <label>Company Name</label>
          <input 
            type="text" 
            value={formData.companyName}
            onChange={(e) => setFormData({...formData, companyName: e.target.value})}
            required 
          />
        </div>
        <div>
          <label>Subdomain</label>
          <input 
            type="text" 
            value={formData.subdomain}
            onChange={(e) => setFormData({...formData, subdomain: e.target.value})}
            placeholder="company-name"
            required 
          />
        </div>
        <div>
          <label>Admin Name</label>
          <input 
            type="text" 
            value={formData.adminName}
            onChange={(e) => setFormData({...formData, adminName: e.target.value})}
            required 
          />
        </div>
        <div>
          <label>Admin Email</label>
          <input 
            type="email" 
            value={formData.adminEmail}
            onChange={(e) => setFormData({...formData, adminEmail: e.target.value})}
            required 
          />
        </div>
      </div>
      
      <button type="submit" className="bg-blue-600 text-white px-6 py-2 rounded">
        Create Company & Invite Admin
      </button>
    </form>
  )
}
```

**Company Admin Dashboard:**
```javascript
// pages/company-admin/team/invite.js
export default function InviteTeamMember() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    role: 'EMPLOYEE',
    department: ''
  })

  const handleInvite = async (e) => {
    e.preventDefault()
    
    const response = await fetch('/api/company-admin/invite-member', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    })
    
    if (response.ok) {
      toast.success('Team member invited successfully!')
    }
  }

  return (
    <form onSubmit={handleInvite} className="space-y-6">
      <div className="grid grid-cols-2 gap-6">
        <div>
          <label>Full Name</label>
          <input 
            type="text" 
            value={formData.name}
            onChange={(e) => setFormData({...formData, name: e.target.value})}
            required 
          />
        </div>
        <div>
          <label>Email Address</label>
          <input 
            type="email" 
            value={formData.email}
            onChange={(e) => setFormData({...formData, email: e.target.value})}
            required 
          />
        </div>
        <div>
          <label>Role</label>
          <select 
            value={formData.role}
            onChange={(e) => setFormData({...formData, role: e.target.value})}
          >
            <option value="EMPLOYEE">Employee</option>
            <option value="DEPARTMENT_MANAGER">Department Manager</option>
            <option value="HR_MANAGER">HR Manager</option>
          </select>
        </div>
        <div>
          <label>Department</label>
          <input 
            type="text" 
            value={formData.department}
            onChange={(e) => setFormData({...formData, department: e.target.value})}
          />
        </div>
      </div>
      
      <button type="submit" className="bg-green-600 text-white px-6 py-2 rounded">
        Send Invitation
      </button>
    </form>
  )
}
```

#### **API Routes for Invitations:**

**Super Admin Invitation API:**
```javascript
// pages/api/super-admin/invite-company.js
import { getServerSession } from 'next-auth'
import { authOptions } from '../auth/[...nextauth]'
import { inviteCompanyAdmin } from '../../../lib/invitations'

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end()
  
  const session = await getServerSession(req, res, authOptions)
  
  // Verify super admin access
  if (!session || session.user.role !== 'SUPER_ADMIN') {
    return res.status(403).json({ error: 'Unauthorized' })
  }
  
  try {
    const { companyName, subdomain, adminName, adminEmail, industry, employeeCount } = req.body
    
    const result = await inviteCompanyAdmin(
      { 
        name: companyName, 
        subdomain, 
        settings: { industry, employeeCount } 
      },
      { name: adminName, email: adminEmail },
      session.user.id
    )
    
    res.status(200).json({ 
      success: true, 
      message: 'Company admin invited successfully',
      tempPassword: result.tempPassword // Show in secure UI
    })
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
}
```

**Company Admin Invitation API:**
```javascript
// pages/api/company-admin/invite-member.js
import { getServerSession } from 'next-auth'
import { authOptions } from '../auth/[...nextauth]'
import { inviteTeamMember } from '../../../lib/invitations'

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end()
  
  const session = await getServerSession(req, res, authOptions)
  
  // Verify company admin access
  if (!session || !['COMPANY_ADMIN', 'HR_MANAGER'].includes(session.user.role)) {
    return res.status(403).json({ error: 'Unauthorized' })
  }
  
  try {
    const { name, email, role, department } = req.body
    
    const result = await inviteTeamMember(
      { name, email, role, department },
      session.user.companyId,
      session.user.id
    )
    
    res.status(200).json({ 
      success: true, 
      message: 'Team member invited successfully' 
    })
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
}
```

#### **Probation Notification System:**
```javascript
// lib/notifications/probation.js
import { resend } from '../resend'
import { prisma } from '../prisma'

export async function scheduleeProbationNotifications(employeeId) {
  const employee = await prisma.employee.findUnique({
    where: { id: employeeId },
    include: { company: true, manager: true }
  })

  const probationEnd = new Date(employee.employment_details.probation_end_date)
  
  // Schedule notifications
  const notifications = [
    { days: 45, type: 'mid_review' },
    { days: 75, type: 'final_review' },
    { days: 85, type: 'completion_due' }
  ]

  for (const notification of notifications) {
    const scheduleDate = new Date(probationEnd)
    scheduleDate.setDate(scheduleDate.getDate() - (90 - notification.days))
    
    await prisma.probationNotification.create({
      data: {
        employee_id: employeeId,
        notification_type: notification.type,
        scheduled_date: scheduleDate,
        recipients: {
          hr: [employee.company.hr_email],
          manager: [employee.manager.email],
          employee: [employee.personal_info.email]
        }
      }
    })
  }
}
```

### **Replit-Specific Optimizations:**

#### **File Structure for Replit:**
```
/
├── app/                 # Next.js App Router
├── components/          # Reusable UI components  
├── lib/                 # Utilities (prisma, auth, etc.)
├── prisma/              # Database schema & migrations
├── public/              # Static assets
├── .env                 # Environment variables
├── package.json         # Dependencies
├── replit.nix          # Replit environment config
└── .replit             # Replit project config
```

#### **Replit Configuration:**
```nix
# replit.nix
{ pkgs }: {
  deps = [
    pkgs.nodejs-18_x
    pkgs.postgresql
    pkgs.openssl
  ];
}
```

```toml
# .replit
run = "npm run dev"
entrypoint = "app/page.tsx"

[nix]
channel = "stable-22_11"

[deployment]
run = ["npm", "run", "start"]
```

This architecture provides a robust, UAE-compliant, multi-tenant ERP/HRMS system optimized for Replit development and Netlify deployment.

## Implementation Priority Order

### Phase 1: Foundation (Weeks 1-2)
1. Set up multi-tenant database schema
2. Implement authentication and RBAC
3. Create basic company and user management
4. Build super admin portal foundation

### Phase 2: Core Employee Module (Weeks 3-4)
1. Employee CRUD operations with UAE compliance fields
2. Document upload and management system
3. Department and position management
4. Basic reporting dashboard

### Phase 3: Probation & Notifications (Week 5)
1. Probation period tracking system
2. Automated notification engine
3. Evaluation workflow implementation
4. Manager and HR dashboards

### Phase 4: Advanced Features (Weeks 6-8)
1. Leave management system
2. Attendance tracking
3. Basic payroll functionality
4. Employee self-service portal

### Phase 5: Enhanced Features (Weeks 9-12)
1. Advanced reporting and analytics
2. Mobile app development
3. API integrations
4. Performance optimization

## API Structure Requirements

### Authentication Endpoints:
```
POST /api/auth/login
POST /api/auth/register
POST /api/auth/refresh
POST /api/auth/logout
```

### Employee Management:
```
GET /api/companies/:id/employees
POST /api/companies/:id/employees
GET /api/companies/:id/employees/:employeeId
PUT /api/companies/:id/employees/:employeeId
DELETE /api/companies/:id/employees/:employeeId
```

### Document Management:
```
POST /api/employees/:id/documents
GET /api/employees/:id/documents
PUT /api/documents/:id/approve
DELETE /api/documents/:id
```

### Probation Management:
```
GET /api/employees/:id/probation
PUT /api/employees/:id/probation/evaluate
POST /api/employees/:id/probation/extend
```

## Module-Based Dashboard System (NineToS Style - Exact Match)

### Main Company Dashboard Layout:
Create a central hub at `/company-admin/dashboard` that exactly replicates the NineToS dashboard design:

#### **Header Section:**
- **Company branding area** with logo and "Enterprise HRMS Platform" tagline
- **Welcome banner** with personalized greeting (e.g., "Hey [User Name]! 👋")
- **Time/date display** with motivational quote
- **Creative Mode toggle** (or similar company-specific feature toggle)

#### **Module Grid Layout (3 columns, 2 rows):**
Create exactly 6 main modules in a responsive grid:

**Row 1 - Primary Business Modules:**

1. **Human Resources** (Blue theme #3B82F6)
   - Icon: Users/People icon in white
   - Description: "Employee management, leave tracking, and HR analytics"
   - "Open Dashboard" button with arrow
   - Quick Access: Employees, Leave Management, Performance, Documents

2. **Payroll** (Green theme #10B981) 
   - Icon: Dollar sign in white
   - Description: "Salary processing, payslips, and compensation management"
   - "Open Dashboard" button with arrow
   - Quick Access: Salary Processing, Payslips, Tax Management, EOS Calculation

3. **Finance** (Purple theme #8B5CF6)
   - Icon: Credit card/Wallet in white
   - Description: "Expense tracking, budgets, and financial analytics"
   - "Open Dashboard" button with arrow
   - Quick Access: Petty Cash, Expenses, Budgets, Reports

**Row 2 - Secondary Business Modules:**

4. **CRM** (Orange theme #F97316)
   - Icon: Target/Bullseye in white
   - Description: "Customer relationships, sales pipeline, and lead management"
   - "Open Dashboard" button with arrow
   - Quick Access: Contacts, Deals, Pipeline, Analytics

5. **Marketing** (Pink theme #EC4899)
   - Icon: Bar chart in white
   - Description: "Campaigns, customer segments, and marketing analytics"
   - "Open Dashboard" button with arrow
   - Quick Access: Campaigns, Segments, Analytics, Reports

6. **Project Management** (Cyan theme #06B6D4)
   - Icon: Kanban board in white
   - Description: "Task boards, milestones, and team collaboration"
   - "Open Dashboard" button with arrow
   - Quick Access: Projects, Tasks, Milestones, Teams

#### **Exact Card Design Structure:**
Each module card should replicate the NineToS design:

**Card Layout:**
- **Colored header strip** (4px height) matching module theme color
- **White card background** with subtle shadow and rounded corners
- **Left side**: Large colored icon circle (64px) with white icon
- **Right side**: Module content area
- **Module title** in bold, dark text (24px font)
- **Description text** in gray, smaller font (14px)
- **"Open Dashboard" button** in module theme color with right arrow
- **Quick Access section** with light gray header
- **Quick access items** as small colored dots with labels in 2 columns

**Color Scheme Matching Screenshot:**
- Human Resources: #3B82F6 (Blue)
- Payroll: #10B981 (Green) 
- Finance: #8B5CF6 (Purple)
- CRM: #F97316 (Orange)
- Marketing: #EC4899 (Pink)
- Project Management: #06B6D4 (Cyan)

#### **Responsive Design:**
- **Desktop**: 3 columns × 2 rows grid
- **Tablet**: 2 columns × 3 rows grid  
- **Mobile**: 1 column × 6 rows stack

#### **Interactive Elements:**
- **Hover effects** on cards (slight elevation and shadow increase)
- **Click animations** on "Open Dashboard" buttons
- **Quick access items** clickable for direct navigation
- **Smooth transitions** between states

### Individual Module Interfaces (Color-Themed):
When clicking "Open Dashboard", navigate to module-specific interfaces that maintain the same color theme:

#### **Module-Specific Color Theming:**
Each module uses its dashboard card color throughout the entire interface:

**Human Resources Module (Blue #3B82F6):**
- Header background: Blue gradient
- Sidebar active items: Blue highlights
- Primary buttons: Blue (#3B82F6)
- Stats cards: Blue accents
- Icons and highlights: Blue theme

**Payroll Module (Green #10B981):**
- Header background: Green gradient
- Sidebar active items: Green highlights
- Primary buttons: Green (#10B981)
- Stats cards: Green accents
- Icons and highlights: Green theme

**Finance Module (Purple #8B5CF6):**
- Header background: Purple gradient
- Sidebar active items: Purple highlights
- Primary buttons: Purple (#8B5CF6)
- Stats cards: Purple accents
- Icons and highlights: Purple theme

**CRM Module (Orange #F97316):**
- Header background: Orange gradient
- Sidebar active items: Orange highlights
- Primary buttons: Orange (#F97316)
- Stats cards: Orange accents
- Icons and highlights: Orange theme

**Marketing Module (Pink #EC4899):**
- Header background: Pink gradient
- Sidebar active items: Pink highlights
- Primary buttons: Pink (#EC4899)
- Stats cards: Pink accents
- Icons and highlights: Pink theme

**Project Management Module (Cyan #06B6D4):**
- Header background: Cyan gradient
- Sidebar active items: Cyan highlights
- Primary buttons: Cyan (#06B6D4)
- Stats cards: Cyan accents
- Icons and highlights: Cyan theme

#### **Module Header Design (Colored):**
Each module header follows this exact structure:
- **Colored header bar** (same color as dashboard card) with gradient
- **Module logo/icon** (white) + "Module Name" text (white)
- **Search bar** centered with module-colored placeholder
- **Notification bell** and **profile icons** (white)
- **Breadcrumb navigation**: "Back to Dashboard" with home icon
- **Module title**: Large text "Module Dashboard"
- **Module description**: "Overview of your [module] operations"
- **Primary action button**: Module-colored (e.g., "Add Employee" for HR)

#### **Module Sidebar Navigation:**
- **White sidebar** with module-colored active states
- **Dashboard** item highlighted in module color
- **Navigation items** with counts (e.g., "Employees 247", "Leave Management 15")
- **Active item** highlighted with module color background
- **Icons** in module color for active items
- **Settings** at bottom with gear icon

#### **Main Content Area Design:**
- **4 Statistics Cards** in a row:
  - Card with large number (e.g., "247") and module-colored icon
  - Trend indicators (+12 from last month) in green/red
  - Each card uses module color for icons and accents
- **Two-column layout** below stats:
  - **Left**: "Recent Activities" with timeline
  - **Right**: "Pending Tasks" with priority badges
- **Activity items** with colored status dots matching module theme
- **Task priority badges**: "high" (red), "medium" (yellow), "low" (green)

#### **Consistent Module Layout Pattern:**
Every module follows this exact structure:
1. **Colored header** with search and navigation
2. **Page title and description** with primary action button
3. **Left sidebar** with module navigation
4. **4 stats cards** with module-themed icons
5. **Two-column content**: Recent Activities + Pending Tasks
6. **Footer** with module-colored elements

#### **Color Theme Implementation:**
```css
/* Example for HR Module */
:root[data-module="hr"] {
  --module-primary: #3B82F6;
  --module-light: #DBEAFE;
  --module-dark: #1E40AF;
  --module-gradient: linear-gradient(135deg, #3B82F6 0%, #1E40AF 100%);
}

/* Example for Payroll Module */
:root[data-module="payroll"] {
  --module-primary: #10B981;
  --module-light: #D1FAE5;
  --module-dark: #047857;
  --module-gradient: linear-gradient(135deg, #10B981 0%, #047857 100%);
}
```

#### **Navigation Pattern:**
- **Back to Dashboard** button (home icon + text)
- **Module breadcrumb** showing current location
- **Module switcher** dropdown maintaining color themes
- **User profile** and **settings** in header
- **Consistent transitions** between modules with color changes

### UI/UX Requirements

### Design System:
- **Color Scheme**: Professional blue (#1E88E5) with clean, flat design
- **Typography**: Modern sans-serif font stack (Inter or similar)
- **Layout**: Card-based responsive design with proper spacing
- **Components**: Consistent component library across all modules
- **Icons**: Lucide React icon set for consistency

### User Experience:
- **Intuitive module discovery** through visual cards
- **One-click module access** from dashboard
- **Contextual navigation** within modules
- **Quick search** across all modules from dashboard
- **Breadcrumb navigation** for easy orientation
- **Mobile-responsive** design with touch-friendly interactions
- **Accessibility compliance** (WCAG 2.1)

### Dashboard Features:
- **Role-specific module visibility** based on permissions
- **Module usage analytics** showing popular and underused modules
- **Quick action shortcuts** for common tasks
- **Recent activity feed** across all modules
- **Notification center** with module-specific alerts
- **Module configuration panel** for administrators
- **Search functionality** to find specific modules or features
- **Favorites system** to pin frequently used modules

## Deployment & DevOps

### Environment Setup:
- Development, staging, and production environments
- Environment-specific configuration management
- Secure secrets management
- Database migration strategy

### Monitoring & Maintenance:
- Application performance monitoring
- Error tracking and alerting
- Automated backup systems
- Regular security updates
- Usage analytics and reporting

## Success Metrics

### Technical Metrics:
- System uptime (99.9% target)
- Response time (<200ms for API calls)
- User satisfaction scores
- Security compliance ratings

### Business Metrics:
- User adoption rates
- Feature utilization
- Customer retention
- Support ticket reduction

This comprehensive system will provide a robust, scalable, and compliant HRMS/ERP solution suitable for UAE-based companies while maintaining the flexibility to expand to other jurisdictions and business modules.

Create modular, scalable code with proper error handling, validation, and logging throughout the application. Include comprehensive API documentation and unit tests for all major functions.